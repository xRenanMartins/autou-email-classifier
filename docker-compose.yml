version: '3.8'

services:
  # Backend API
  backend:
    build:
      context: ./app/backend
      dockerfile: Dockerfile
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - HOST=0.0.0.0
      - PORT=8000
      - CORS_ORIGINS=["http://localhost:3000", "http://localhost:8080"]
      - LOG_LEVEL=DEBUG
      - LOG_FORMAT=console
      - USE_DATABASE=false
      - METRICS_ENABLED=false
    volumes:
      - ./app/backend:/app
      - /app/__pycache__
    depends_on:
      - redis
    networks:
      - email-classifier-network
    restart: unless-stopped

  # Redis para cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - email-classifier-network
    restart: unless-stopped
    command: redis-server --appendonly yes

  # Frontend (opcional - pode rodar localmente)
  frontend:
    build:
      context: ./app/frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - VITE_API_URL=http://localhost:8000
    volumes:
      - ./app/frontend:/app
      - /app/node_modules
    depends_on:
      - backend
    networks:
      - email-classifier-network
    restart: unless-stopped

  # Prometheus para métricas (opcional)
  prometheus:
    image: prom/prometheus:latest
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - email-classifier-network
    restart: unless-stopped

  # Grafana para visualização (opcional)
  grafana:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    depends_on:
      - prometheus
    networks:
      - email-classifier-network
    restart: unless-stopped

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

networks:
  email-classifier-network:
    driver: bridge

